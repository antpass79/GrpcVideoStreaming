@page "/"
@using StreamingCore.Actors;
@using Grpc.Core;
@using Grpc.Net.Client;
@using Grpc.Net.Client.Web;
@using StreamingCore;

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?" />

<textarea style="width: 600px; height: 200px;">@Text</textarea>
<img width="600" height="500" src="data:image/jpeg;base64,@CurrentFrame" />

@code {
	string Text { get; set; } = string.Empty;
	string CurrentFrame { get; set; } = string.Empty;

	async Task StateHasChangedAsync()
	{
		await InvokeAsync(() => StateHasChanged());
	}

	async protected override Task OnInitializedAsync()
	{
		var frameReceiver = new FrameReceiver();

		frameReceiver.FrameArrived += async (sender, frame) =>
		{
			CurrentFrame = frame.Content.ToBase64()!;
			//Text += $"Frame with Id {frame.Id} with a delay of {DateTime.UtcNow - frame.GeneratedAt.ToDateTime()}" + System.Environment.NewLine;
			await StateHasChangedAsync();
		};
		frameReceiver.ActorConnected += async (sender, actor) =>
		{
			Text += $"{actor.Name} connected to the session" + System.Environment.NewLine;
			await StateHasChangedAsync();
		};

		var httpClient = new HttpClient(new GrpcWebHandler(GrpcWebMode.GrpcWeb, new HttpClientHandler()));

		await frameReceiver.Run(clientOptions: new GrpcClientOptions
		{
				Url = "https://localhost:5001",
				ChannelOptions = new GrpcChannelOptions
				{
					Credentials = ChannelCredentials.SecureSsl,
					HttpClient = httpClient
				}
		});
	}
}